<?php

namespace Container0xtqmpP;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getDoctrine_Orm_DefaultEntityManagerService extends App_KernelProdContainer
{
    /*
     * Gets the public 'doctrine.orm.default_entity_manager' shared service.
     *
     * @return \Doctrine\ORM\EntityManager
     */
    public static function do($container, $lazyLoad = true)
    {
        $a = ($container->services['doctrine.dbal.default_connection'] ?? $container->load('getDoctrine_Dbal_DefaultConnectionService'));

        if (isset($container->services['doctrine.orm.default_entity_manager'])) {
            return $container->services['doctrine.orm.default_entity_manager'];
        }
        $b = ($container->privates['doctrine.dbal.default_connection.event_manager'] ?? $container->load('getDoctrine_Dbal_DefaultConnection_EventManagerService'));

        if (isset($container->services['doctrine.orm.default_entity_manager'])) {
            return $container->services['doctrine.orm.default_entity_manager'];
        }
        $c = new \Doctrine\ORM\Configuration();

        $d = new \Doctrine\Persistence\Mapping\Driver\MappingDriverChain();
        $d->addDriver(new \Doctrine\ORM\Mapping\Driver\AttributeDriver([0 => (\dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'Entity')], false), 'App\\Entity');

        $c->setEntityNamespaces(['App' => 'App\\Entity']);
        $c->setMetadataCache(new \Symfony\Component\Cache\Adapter\PhpArrayAdapter(($container->targetDir.''.'/doctrine/orm/default_metadata.php'), new \Symfony\Component\Cache\Adapter\ArrayAdapter()));
        $c->setQueryCache(($container->privates['doctrine.system_cache_pool'] ?? $container->load('getDoctrine_SystemCachePoolService')));
        $c->setResultCache(($container->privates['doctrine.result_cache_pool'] ?? $container->load('getDoctrine_ResultCachePoolService')));
        $c->setMetadataDriverImpl(new \Doctrine\Bundle\DoctrineBundle\Mapping\MappingDriver($d, new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService, [
            'doctrine.ulid_generator' => ['privates', 'doctrine.ulid_generator', 'getDoctrine_UlidGeneratorService', true],
            'doctrine.uuid_generator' => ['privates', 'doctrine.uuid_generator', 'getDoctrine_UuidGeneratorService', true],
        ], [
            'doctrine.ulid_generator' => '?',
            'doctrine.uuid_generator' => '?',
        ])));
        $c->setProxyDir(($container->targetDir.''.'/doctrine/orm/Proxies'));
        $c->setProxyNamespace('Proxies');
        $c->setAutoGenerateProxyClasses(false);
        $c->setSchemaIgnoreClasses([]);
        $c->setClassMetadataFactoryName('Doctrine\\Bundle\\DoctrineBundle\\Mapping\\ClassMetadataFactory');
        $c->setDefaultRepositoryClassName('Doctrine\\ORM\\EntityRepository');
        $c->setNamingStrategy(new \Doctrine\ORM\Mapping\UnderscoreNamingStrategy(0, true));
        $c->setQuoteStrategy(new \Doctrine\ORM\Mapping\DefaultQuoteStrategy());
        $c->setEntityListenerResolver(new \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerEntityListenerResolver($container));
        $c->setLazyGhostObjectEnabled(false);
        $c->setRepositoryFactory(new \Doctrine\Bundle\DoctrineBundle\Repository\ContainerRepositoryFactory(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService, [
            'App\\Repository\\AgentCollecteRepository' => ['privates', 'App\\Repository\\AgentCollecteRepository', 'getAgentCollecteRepositoryService', true],
            'App\\Repository\\ContributeursRepository' => ['privates', 'App\\Repository\\ContributeursRepository', 'getContributeursRepositoryService', true],
            'App\\Repository\\ExcedentRepository' => ['privates', 'App\\Repository\\ExcedentRepository', 'getExcedentRepositoryService', true],
            'App\\Repository\\ImpotAssiValeurRepository' => ['privates', 'App\\Repository\\ImpotAssiValeurRepository', 'getImpotAssiValeurRepositoryService', true],
            'App\\Repository\\ImpotCFNPBRepository' => ['privates', 'App\\Repository\\ImpotCFNPBRepository', 'getImpotCFNPBRepositoryService', true],
            'App\\Repository\\ImpotCFPBRepository' => ['privates', 'App\\Repository\\ImpotCFPBRepository', 'getImpotCFPBRepositoryService', true],
            'App\\Repository\\ImpotRepository' => ['privates', 'App\\Repository\\ImpotRepository', 'getImpotRepositoryService', true],
            'App\\Repository\\ImpotTOMRepository' => ['privates', 'App\\Repository\\ImpotTOMRepository', 'getImpotTOMRepositoryService', true],
            'App\\Repository\\ProprieteRepository' => ['privates', 'App\\Repository\\ProprieteRepository', 'getProprieteRepositoryService', true],
            'App\\Repository\\RecetteNonFiscaleRepository' => ['privates', 'App\\Repository\\RecetteNonFiscaleRepository', 'getRecetteNonFiscaleRepositoryService', true],
            'App\\Repository\\ResetPasswordRequestRepository' => ['privates', 'App\\Repository\\ResetPasswordRequestRepository', 'getResetPasswordRequestRepositoryService', true],
            'App\\Repository\\RessourceRepository' => ['privates', 'App\\Repository\\RessourceRepository', 'getRessourceRepositoryService', true],
            'App\\Repository\\RistourneRepository' => ['privates', 'App\\Repository\\RistourneRepository', 'getRistourneRepositoryService', true],
            'App\\Repository\\SiteCollecteRepository' => ['privates', 'App\\Repository\\SiteCollecteRepository', 'getSiteCollecteRepositoryService', true],
            'App\\Repository\\TaxDetailRepository' => ['privates', 'App\\Repository\\TaxDetailRepository', 'getTaxDetailRepositoryService', true],
            'App\\Repository\\TaxRepository' => ['privates', 'App\\Repository\\TaxRepository', 'getTaxRepositoryService', true],
            'App\\Repository\\TaxeIndirecteRepository' => ['privates', 'App\\Repository\\TaxeIndirecteRepository', 'getTaxeIndirecteRepositoryService', true],
            'App\\Repository\\TaxsRepository' => ['privates', 'App\\Repository\\TaxsRepository', 'getTaxsRepositoryService', true],
            'App\\Repository\\TypeImpRepository' => ['privates', 'App\\Repository\\TypeImpRepository', 'getTypeImpRepositoryService', true],
            'App\\Repository\\TypeImpotsRepository' => ['privates', 'App\\Repository\\TypeImpotsRepository', 'getTypeImpotsRepositoryService', true],
            'App\\Repository\\UserRepository' => ['privates', 'App\\Repository\\UserRepository', 'getUserRepositoryService', true],
        ], [
            'App\\Repository\\AgentCollecteRepository' => '?',
            'App\\Repository\\ContributeursRepository' => '?',
            'App\\Repository\\ExcedentRepository' => '?',
            'App\\Repository\\ImpotAssiValeurRepository' => '?',
            'App\\Repository\\ImpotCFNPBRepository' => '?',
            'App\\Repository\\ImpotCFPBRepository' => '?',
            'App\\Repository\\ImpotRepository' => '?',
            'App\\Repository\\ImpotTOMRepository' => '?',
            'App\\Repository\\ProprieteRepository' => '?',
            'App\\Repository\\RecetteNonFiscaleRepository' => '?',
            'App\\Repository\\ResetPasswordRequestRepository' => '?',
            'App\\Repository\\RessourceRepository' => '?',
            'App\\Repository\\RistourneRepository' => '?',
            'App\\Repository\\SiteCollecteRepository' => '?',
            'App\\Repository\\TaxDetailRepository' => '?',
            'App\\Repository\\TaxRepository' => '?',
            'App\\Repository\\TaxeIndirecteRepository' => '?',
            'App\\Repository\\TaxsRepository' => '?',
            'App\\Repository\\TypeImpRepository' => '?',
            'App\\Repository\\TypeImpotsRepository' => '?',
            'App\\Repository\\UserRepository' => '?',
        ])));

        $container->services['doctrine.orm.default_entity_manager'] = $instance = new \Doctrine\ORM\EntityManager($a, $c, $b);

        (new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator([], []))->configure($instance);

        return $instance;
    }
}
